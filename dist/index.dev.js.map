{"version":3,"sources":["index.js"],"names":["fs","require","inquirer","generatePage","questions","prompt","type","name","message","validate","nameInput","console","log","choices","writeFile","data","err","then","answers"],"mappings":";;AACA,IAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,IAAMC,QAAQ,GAAGD,OAAO,CAAC,UAAD,CAAxB;;AAGA,IAAME,YAAY,GAAGF,OAAO,CAAC,6BAAD,CAA5B,C,CACA;;;AACA,IAAMG,SAAS,GAAG,SAAZA,SAAY,GAAM;AACpB;AACA,SAAOF,QAAQ,CAACG,MAAT,CAAgB,CACrB;AACEC,IAAAA,IAAI,EAAE,OADR;AAEEC,IAAAA,IAAI,EAAE,QAFR;AAGEC,IAAAA,OAAO,EAAE,+BAHX;AAIEC,IAAAA,QAAQ,EAAE,kBAAAC,SAAS,EAAI;AACrB,UAAIA,SAAJ,EAAe;AACb,eAAO,IAAP;AACD,OAFD,MAEO;AACLC,QAAAA,OAAO,CAACC,GAAR,CAAY,oCAAZ;AACA,eAAO,KAAP;AACD;AACF;AAXH,GADqB,EAcrB;AACEN,IAAAA,IAAI,EAAE,OADR;AAEEC,IAAAA,IAAI,EAAE,OAFR;AAGEC,IAAAA,OAAO,EAAE,6BAHX;AAIEC,IAAAA,QAAQ,EAAE,kBAAAC,SAAS,EAAI;AACrB,UAAIA,SAAJ,EAAe;AACb,eAAO,IAAP;AACD,OAFD,MAEO;AACLC,QAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ;AACA,eAAO,KAAP;AACD;AACF;AAXH,GAdqB,EA2BrB;AACEN,IAAAA,IAAI,EAAE,OADR;AAEEC,IAAAA,IAAI,EAAE,OAFR;AAGEC,IAAAA,OAAO,EAAE,4BAHX;AAIEC,IAAAA,QAAQ,EAAE,kBAAAC,SAAS,EAAI;AACrB,UAAIA,SAAJ,EAAe;AACb,eAAO,IAAP;AACD,OAFD,MAEO;AACLC,QAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ;AACA,eAAO,KAAP;AACD;AACF;AAXH,GA3BqB,EAwCrB;AACEN,IAAAA,IAAI,EAAE,OADR;AAEEC,IAAAA,IAAI,EAAE,aAFR;AAGEC,IAAAA,OAAO,EAAE,mDAHX;AAIEC,IAAAA,QAAQ,EAAE,kBAAAC,SAAS,EAAI;AACrB,UAAIA,SAAJ,EAAe;AACb,eAAO,IAAP;AACD,OAFD,MAEO;AACLC,QAAAA,OAAO,CAACC,GAAR,CAAY,6CAAZ;AACA,eAAO,KAAP;AACD;AACF;AAXH,GAxCqB,EAqDrB;AACEN,IAAAA,IAAI,EAAE,MADR;AAEEC,IAAAA,IAAI,EAAE,SAFR;AAGEC,IAAAA,OAAO,EAAE,gDAHX;AAIEK,IAAAA,OAAO,EAAE,CAAC,KAAD,EAAQ,KAAR,CAJX;AAKE,eAAS,KALX;AAMEJ,IAAAA,QAAQ,EAAE,kBAAAC,SAAS,EAAI;AACrB,UAAIA,SAAJ,EAAe;AACb,eAAO,IAAP;AACD,OAFD,MAEO;AACLC,QAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACA,eAAO,KAAP;AACD;AACF;AAbH,GArDqB,EAoErB;AACEN,IAAAA,IAAI,EAAE,OADR;AAEEC,IAAAA,IAAI,EAAE,SAFR;AAGEC,IAAAA,OAAO,EAAE,sDAHX;AAIEC,IAAAA,QAAQ,EAAE,kBAAAC,SAAS,EAAI;AACrB,UAAIA,SAAJ,EAAe;AACb,eAAO,IAAP;AACD,OAFD,MAEO;AACLC,QAAAA,OAAO,CAACC,GAAR,CAAY,sDAAZ;AACA,eAAO,KAAP;AACD;AACF;AAXH,GApEqB,EAiFrB;AACEN,IAAAA,IAAI,EAAE,OADR;AAEEC,IAAAA,IAAI,EAAE,OAFR;AAGEC,IAAAA,OAAO,EAAE,0BAHX;AAIEC,IAAAA,QAAQ,EAAE,kBAAAC,SAAS,EAAI;AACrB,UAAIA,SAAJ,EAAe;AACb,eAAO,IAAP;AACD,OAFD,MAEO;AACLC,QAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ;AACA,eAAO,KAAP;AACD;AACF;AAXH,GAjFqB,EA8FrB;AACEN,IAAAA,IAAI,EAAE,OADR;AAEEC,IAAAA,IAAI,EAAE,MAFR;AAGEC,IAAAA,OAAO,EAAE,0CAHX;AAIE,eAAS;AAJX,GA9FqB,EAoGrB;AACEF,IAAAA,IAAI,EAAE,OADR;AAEEC,IAAAA,IAAI,EAAE,cAFR;AAGEC,IAAAA,OAAO,EAAE;AAHX,GApGqB,CAAhB,CAAP;AA0GD,CA5GH,C,CA8GE;;;AACA,IAAMM,SAAS,GAAG,SAAZA,SAAY,CAAAC,IAAI,EAAI;AACxBf,EAAAA,EAAE,CAACc,SAAH,CAAa,WAAb,EAA0BC,IAA1B,EAAgC,UAAAC,GAAG,EAAI;AAErC,QAAIA,GAAJ,EAAS;AACPL,MAAAA,OAAO,CAACC,GAAR,CAAYI,GAAZ;AACA;AACD,KAHD,MAGO;AACLL,MAAAA,OAAO,CAACC,GAAR,CAAY,4CAAZ;AACD;AACF,GARD;AASD,CAVD,C,CAYA;;;AACAR,SAAS,GACNa,IADH,CACQ,UAAAC,OAAO;AAAA,SAAIf,YAAY,CAACe,OAAD,CAAhB;AAAA,CADf,EAEGD,IAFH,CAEQ,UAAAF,IAAI;AAAA,SAAID,SAAS,CAACC,IAAD,CAAb;AAAA,CAFZ,WAGS,UAAAC,GAAG;AAAA,SAAIL,OAAO,CAACC,GAAR,CAAYI,GAAZ,CAAJ;AAAA,CAHZ","sourcesContent":["\r\nconst fs = require('fs'); \r\nconst inquirer = require('inquirer'); \r\n\r\n\r\nconst generatePage = require('./utils/generateMarkdown.js');\r\n// Define an array of questions for the user\r\nconst questions = () => {\r\n    // Use Inquirer to prompt questions to the user\r\n    return inquirer.prompt([\r\n      {\r\n        type: 'input',\r\n        name: 'github',\r\n        message: 'What is your GitHub username?',\r\n        validate: nameInput => {\r\n          if (nameInput) {\r\n            return true;\r\n          } else {\r\n            console.log('Please enter your GitHub username!');\r\n            return false; \r\n          }\r\n        } \r\n      },\r\n      {\r\n        type: 'input',\r\n        name: 'email',\r\n        message: 'What is your email address?',\r\n        validate: nameInput => {\r\n          if (nameInput) {\r\n            return true;\r\n          } else {\r\n            console.log('Please enter your email address!');\r\n            return false; \r\n          }\r\n        }\r\n      },\r\n      {\r\n        type: 'input',\r\n        name: 'title',\r\n        message: 'What is your project name?',\r\n        validate: nameInput => {\r\n          if (nameInput) {\r\n            return true;\r\n          } else {\r\n            console.log('Please enter your project name!');\r\n            return false; \r\n          }\r\n        }\r\n      },\r\n      {\r\n        type: 'input',\r\n        name: 'description',\r\n        message: 'Please write a short description of your project.',\r\n        validate: nameInput => {\r\n          if (nameInput) {\r\n            return true;\r\n          } else {\r\n            console.log('Please enter a description of your project!');\r\n            return false; \r\n          }\r\n        }\r\n      }, \r\n      {\r\n        type: 'list',\r\n        name: 'license',\r\n        message: 'What kind of license should your project have?',\r\n        choices: ['MIT', 'GNU'],\r\n        default: 'MIT',\r\n        validate: nameInput => {\r\n          if (nameInput) {\r\n            return true;\r\n          } else {\r\n            console.log('Please choose a license!');\r\n            return false; \r\n          }\r\n        }\r\n      },\r\n      {\r\n        type: 'input',\r\n        name: 'install',\r\n        message: 'What are the steps required to install your project?',\r\n        validate: nameInput => {\r\n          if (nameInput) {\r\n            return true;\r\n          } else {\r\n            console.log('Please enter steps required to install your project!');\r\n            return false; \r\n          }\r\n        }\r\n      },\r\n      {\r\n        type: 'input',\r\n        name: 'usage',\r\n        message: 'How do you use this app?',\r\n        validate: nameInput => {\r\n          if (nameInput) {\r\n            return true;\r\n          } else {\r\n            console.log('Please enter a usage description!');\r\n            return false; \r\n          }\r\n        }\r\n      },\r\n      {\r\n        type: 'input',\r\n        name: 'test', \r\n        message: 'What command should be run to run tests?',\r\n        default: 'npm test'\r\n      },\r\n      {\r\n        type: 'input',\r\n        name: 'contributors',\r\n        message: 'What does the user need to know about contributing to the repo?'\r\n      }\r\n    ]);\r\n  };\r\n  \r\n  // Define a function to write the README file using the file system\r\n  const writeFile = data => {\r\n    fs.writeFile('README.md', data, err => {\r\n \r\n      if (err) {\r\n        console.log(err);\r\n        return;\r\n      } else {\r\n        console.log('Your README has been successfully created!');\r\n      }\r\n    });\r\n  }; \r\n  \r\n  // Call the questions function to initialize the program\r\n  questions()\r\n    .then(answers => generatePage(answers))\r\n    .then(data => writeFile(data))\r\n    .catch(err => console.log(err));\r\n  "],"file":"index.dev.js"}